#include <iostream>
#include <vector>
#include <random>
#include <iomanip>
// #include "song.h"
using namespace std;

void swap(vector<Song*> songs, float j, float j_incr) {
    Song* temp = songs[j];
    songs[j] = songs[j_incr];
    songs[j_incr] = temp;
}

void InsertionSort(vector<Song*> songs, int start, int incr, int n) {
    for (int i = start+incr; i < n; i += incr)
        for (int j = i; ((j >= incr) && (songs[j]->rating < songs[j-incr]->rating)); j -= incr)
            swap(songs, j, j-incr);
}

void ShellSort(vector<Song*> songs, int n) {
    for (int i = n/2; i > 2; i /= 2)  // For each increment
        for (int j = 0; j < i; j++)  // Sort each sublist
            InsertionSort(songs, j, i, n);
    InsertionSort(songs, 0, 1, n);
}







vector<Song*> Merge(vector<Song*> songs1, vector<Song*> songs2) {
    vector<Song*> sorted;
    int count1 = 0;
    int count2 = 0;
    int size1 = songs1.size();
    int size2 = songs2.size();
    while (count1 < size1 || count2 < size2) {
        if (count1 == size1) {
            sorted.push_back(songs2[count2]);
            count2++;
        }
        else if (count2 == size2) {
            sorted.push_back(songs1[count1]);
            count1++;
        }
        else if (songs1[count1]->rating <= songs2[count2]->rating) {
            sorted.push_back(songs1[count1++]);
        }
        else
            sorted.push_back(songs2[count2++]);
    }
    return sorted;
}


vector<Song*> MergeSort(vector<Song*> inlist) {
    if (inlist.size() <= 1)
        return inlist;
    vector<Song*> list1;
    vector<Song*> list2;
    for (int i = 0; i < inlist.size(); i++) {
        if (i < inlist.size()/2)
            list1.push_back(inlist[i]);
        else
            list2.push_back(inlist[i]);
    }
    return Merge(MergeSort(list1), MergeSort(list2));
}

void PrintList(vector<Song*> list, int size) {
    for (int i = 0; i < size; i++)
        cout << fixed << setprecision(5) << list[i]->rating << " ";
}
